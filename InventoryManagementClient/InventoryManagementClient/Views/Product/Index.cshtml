@{
ViewBag.Title = "Products";
Layout = "_AdminLayout";
}
<div class=" m-md-3">
    <div class="row">
        <div class="col justify-content-center align-self-center">
            <h4 class="page-header">Products List</h4>
        </div>
        <div class="col text-right">
            <span id="addNewProduct" class="btn-floating peach-gradient" title="Add New Product" data-toggle="tooltip">
                <i class="fa fa-plus" aria-hidden="true"></i>
            </span>
        </div>
    </div>
    <div class="card card-body">
        <table id="product-table" class="table table-sm table-bordered">
            <thead>
                <tr>
                    <th data-type="text">Product Name</th>
                    <th data-type="text">Category Name</th>
                    <th data-type="number">Quantity In Stock</th>
                    <th data-type="number">Purchase Price</th>
                    <th data-type="number">Sale Price</th>
                    <th data-type="text">Warehouse Name</th>
                    <th style="width:50px">Edit</th>
                    <th style="width:50px">Delete</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
<script>
    $(function () {
        dataTable.getData();
    });
    var dataTable = {
        table: null,
        init: function () {
            dataTable.table = $("#product-table").DataTable({
                searchDelay: 500,
                processing: true,
                serverSide: true,
                scrollCollapse: true,
                scrollY: "calc(100vh - 400px)",
                ajax: {
                    url: `${userInfo.apiUrl}products/getproducts`,
                    headers: { 'Authorization': `Bearer ${userInfo.token}` },
                    type: "POST"
                },
                columns: [
                    {
                        data: "ProductName",
                        render: function (data, type, row, meta) {
                            return `<span>${row.productName}</span>`;
                        }
                    },
                    {
                        data: "CategoryName",
                        render: function (data, type, row, meta) {
                            return `<span>${row.categoryName ?? ""}</span>`;
                        }
                    },
                    {
                        data: "QuantityInStock",
                        render: function (data, type, row, meta) {
                            return `<span">${row.quantityInStock}</span>`;
                        }
                    },
                    {
                        data: "PurchasePrice",
                        render: function (data, type, row, meta) {
                            return `<span">$${row.purchasePrice}</span>`;
                        }
                    },
                    {
                        data: "SalePrice",
                        render: function (data, type, row, meta) {
                            return `<span">$${row.salePrice}</span>`;
                        }
                    },
                    {
                        data: "WarehouseName",
                        render: function (data, type, row, meta) {
                            return `<span>${row.warehouseName ?? ""}</span>`;
                        }
                    },
                    {
                        data: "ProductId",
                        render: function (data, type, row, meta) {
                            return `<a class="btn-floating btn-sm btn-blue" onclick="editProduct(${row.productId})" title="Edit" data-toggle="tooltip">
                                            <i class="fa fa-pencil" aria-hidden="true"></i>
                                        </a>`;
                        }
                    },
                    {
                        data: "ProductId",
                        render: function (data, type, row, meta) {
                            return `<span class="btn-floating btn-sm btn-danger" title="Delete" data-toggle="tooltip" onclick="deleteProduct(${row.productId})">
                                            <i class="fa fa-trash" aria-hidden="true"></i>
                                        </span>`;
                        }
                    }
                ],
                columnDefs: [
                    { 'sortable': false, 'targets': [6, 7] },
                    { 'className': "text-left", "targets": [0, 1, 5] },
                    { 'className': "text-right", "targets": [2, 3, 4] }
                ],
                createdRow: function (row, data, dataIndex) {
                    $(row).attr('data-id', data.productId);
                },
            });
        },
        getData: function () {
            dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
        }
    }

    // Add New Product
    $("#addNewProduct").click(function () {
        Swal.fire({
            title: 'Add New Product',
            html: `<div class="card-body">
                        <div class="form-group">
                            <label for="productName">Product Name</label>
                            <input type="text" class="form-control" id="productName" placeholder="Enter Product Name">
                        </div>
                        <div class="form-group">
                            <label for="categoryName">Category Name</label>
                            <select id="categoryName" class="form-control"></select>
                        </div>
                        <div class="form-group">
                            <label for="quantityInStock">Quantity In Stock</label>
                            <input type="text" class="form-control" id="quantityInStock" placeholder="Enter Quantity In Stock">
                        </div>
                        <div class="form-group">
                            <label for="purchasePrice">Purchase Price</label>
                            <input type="text" class="form-control" id="purchasePrice" placeholder="Enter Purchase Price">
                        </div>
                        <div class="form-group">
                            <label for="salePrice">Sale Price</label>
                            <input type="text" class="form-control" id="salePrice" placeholder="Enter Sale Price">
                        </div>
                        <div class="form-group">
                            <label for="warehouseName">Warehouse Name</label>
                            <select id="warehouseName" class="form-control"></select>
                        </div>
                </div>`,
            showCancelButton: true,
            confirmButtonText: 'Save',
            showLoaderOnConfirm: true,
            didOpen: function () {
                $('#warehouseName').select2({
                    ajax: {
                        url: `${userInfo.apiUrl}Warehouses/GetWarehouses`,
                        headers: { 'Authorization': `Bearer ${userInfo.token}` },
                        type: "POST",
                        data: function (params) {
                            let formData = new FormData();
                            formData.append("search.value", params.term || "");
                            formData.append("start", (params.page || 0) * 10);
                            formData.append("length", 10);
                            formData.append("draw", 1);
                            formData.append("columns[0][data]", "WarehouseName");
                            formData.append("columns[0][searchable]", true);
                            return formData;
                        },
                        processResults: function (data) {
                            let results = data.data.reduce((accumulator, currentValue) => {
                                accumulator.push({
                                    id: currentValue.warehouseId,
                                    text: currentValue.warehouseName
                                });
                                return accumulator;
                            }, []);
                            return {
                                results: results,
                                pagination: {
                                    more: data.data.length == 10
                                }
                            };
                        },
                        contentType: false,
                        processData: false,
                        cache: true,
                        delay: 250,
                    },
                    dropdownParent: $(".swal2-popup")
                });
                $('#categoryName').select2({
                    ajax: {
                        url: `${userInfo.apiUrl}Categories/GetCategories`,
                        headers: { 'Authorization': `Bearer ${userInfo.token}` },
                        type: "POST",
                        data: function (params) {
                            let formData = new FormData();
                            formData.append("search.value", params.term || "");
                            formData.append("start", (params.page || 0) * 10);
                            formData.append("length", 10);
                            formData.append("draw", 1);
                            formData.append("columns[0][data]", "CategoryName");
                            formData.append("columns[0][searchable]", true);
                            return formData;
                        },
                        processResults: function (data) {
                            let results = data.data.reduce((accumulator, currentValue) => {
                                accumulator.push({
                                    id: currentValue.categoryId,
                                    text: currentValue.categoryName
                                });
                                return accumulator;
                            }, []);
                            return {
                                results: results,
                                pagination: {
                                    more: data.data.length == 10
                                }
                            };
                        },
                        contentType: false,
                        processData: false,
                        cache: true,
                        delay: 250,
                    },
                    dropdownParent: $(".swal2-popup"),
                });
            },
            preConfirm: () => {
                var productName = $("#productName").val();
                var categoryId = $("#categoryName").val();
                var quantityInStock = $("#quantityInStock").val();
                var purchasePrice = $("#purchasePrice").val();
                var salePrice = $("#salePrice").val();
                var warehouseId = $("#warehouseName").val();
                if (productName == "" || categoryId == "" || quantityInStock == "" || purchasePrice == "" || salePrice == "" || warehouseId == "") {
                    Swal.showValidationMessage(`Please fill all the fields`);
                }
                else {
                    var data = {
                        productName: productName,
                        categoryId: categoryId,
                        quantityInStock: quantityInStock,
                        purchasePrice: purchasePrice,
                        salePrice: salePrice,
                        warehouseId: warehouseId
                    };
                    return $.ajax({
                        url: `${userInfo.apiUrl}products`,
                        headers: { 'Authorization': `Bearer ${userInfo.token}` },
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json",
                        data: JSON.stringify(data),
                        success: function (response) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Add Product Successfully',
                                showConfirmButton: false,
                                timer: 1500
                            })
                            dataTable.table.row.add(response).draw();
                        },
                        error: function (xhr) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Add Product Failed',
                                showConfirmButton: false,
                                timer: 1500
                            })
                        }
                    });
                }
            }
        });
    });

    // Delete Product
    function deleteProduct(productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#DD6B55',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    url: `${userInfo.apiUrl}products/${productId}`,
                    headers: { 'Authorization': `Bearer ${userInfo.token}` },
                    type: "DELETE",
                    dataType: "json",
                    contentType: "application/json",
                    success: function (response) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Delete Product Successfully',
                            showConfirmButton: false,
                            timer: 1500
                        })
                        dataTable.table.row(`[data-id=${productId}]`).remove().draw();
                    },
                    error: function (xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Delete Product Failed',
                            showConfirmButton: false,
                            timer: 1500
                        })
                    }
                });
            }
        })
    }

    // Edit Product
    function editProduct(productId) {
        Swal.fire({
            title: 'Edit Product',
            html: `<div class="card-body text-left">
                        <div class="form-group">
                            <label for="editProductName">Product Name</label>
                            <input type="text" class="form-control" id="editProductName" placeholder="Enter Product Name">
                        </div>
                        <div class="form-group">
                            <label for="editCategoryName">Category Name</label>
                            <select id="editCategoryName" class="form-control text-left"></select>
                        </div>
                        <div class="form-group">
                            <label for="editQuantityInStock">Quantity In Stock</label>
                            <input type="number" class="form-control text-right" id="editQuantityInStock" placeholder="Enter Quantity In Stock">
                        </div>
                        <div class="form-group">
                            <label for="editPurchasePrice">Purchase Price</label>
                            <input type="number" class="form-control text-right" id="editPurchasePrice" placeholder="Enter Purchase Price">
                        </div>
                        <div class="form-group">
                            <label for="editSalePrice">Sale Price</label>
                            <input type="number" class="form-control text-right" id="editSalePrice" placeholder="Enter Sale Price">
                        </div>
                        <div class="form-group">
                            <label for="editWarehouseName">Warehouse Name</label>
                            <select id="editWarehouseName" class="form-control text-left"></select>
                        </div>
                </div>`,
            showCancelButton: true,
            confirmButtonText: 'Save',
            showLoaderOnConfirm: true,
            didOpen: function () {
                // Load existing warehouse data into the form
                $('#editWarehouseName').select2({
                    ajax: {
                        url: `${userInfo.apiUrl}Warehouses/GetWarehouses`,
                        headers: { 'Authorization': `Bearer ${userInfo.token}` },
                        type: "POST",
                        data: function (params) {
                            let formData = new FormData();
                            formData.append("search.value", params.term || "");
                            formData.append("start", (params.page || 0) * 10);
                            formData.append("length", 10);
                            formData.append("draw", 1);
                            formData.append("columns[0][data]", "WarehouseName");
                            formData.append("columns[0][searchable]", true);
                            return formData;
                        },
                        processResults: function (data) {
                            let results = data.data.reduce((accumulator, currentValue) => {
                                accumulator.push({
                                    id: currentValue.warehouseId,
                                    text: currentValue.warehouseName
                                });
                                return accumulator;
                            }, []);
                            return {
                                results: results,
                                pagination: {
                                    more: data.data.length == 10
                                }
                            };
                        },
                        contentType: false,
                        processData: false,
                        cache: true,
                        delay: 250,
                    },
                    dropdownParent: $(".swal2-popup")
                });
                // Load existing category data into the form
                $('#editCategoryName').select2({
                    ajax: {
                        url: `${userInfo.apiUrl}Categories/GetCategories`,
                        headers: { 'Authorization': `Bearer ${userInfo.token}` },
                        type: "POST",
                        data: function (params) {
                            let formData = new FormData();
                            formData.append("search.value", params.term || "");
                            formData.append("start", (params.page || 0) * 10);
                            formData.append("length", 10);
                            formData.append("draw", 1);
                            formData.append("columns[0][data]", "CategoryName");
                            formData.append("columns[0][searchable]", true);
                            return formData;
                        },
                        processResults: function (data) {
                            let results = data.data.reduce((accumulator, currentValue) => {
                                accumulator.push({
                                    id: currentValue.categoryId,
                                    text: currentValue.categoryName
                                });
                                return accumulator;
                            }, []);
                            return {
                                results: results,
                                pagination: {
                                    more: data.data.length == 10
                                }
                            };
                        },
                        contentType: false,
                        processData: false,
                        cache: true,
                        delay: 250,
                    },
                    dropdownParent: $(".swal2-popup")
                });
                // Load existing product data into the form
                $.ajax({
                    url: `${userInfo.apiUrl}products/${productId}`,
                    headers: { 'Authorization': `Bearer ${userInfo.token}` },
                    type: "GET",
                    dataType: "json",
                    success: function (product) {
                        $("#editProductName").val(product.productName);
                        $("#editQuantityInStock").val(product.quantityInStock);
                        $("#editPurchasePrice").val(product.purchasePrice);
                        $("#editSalePrice").val(product.salePrice);
                        var category = new Option(product.categoryName ?? "", product.categoryId ?? "", true, true);
                        $('#editCategoryName').append(category).trigger('change');

                        var warehouse = new Option(product.warehouseName ?? "", product.warehouseId ?? "", true, true);
                        $('#editWarehouseName').append(warehouse).trigger('change');
                    },
                    error: function (xhr) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to load product data for editing',
                            showConfirmButton: false,
                            timer: 1500
                        })
                    }
                });
            },
            preConfirm: () => {
                // Collect and submit edited product data
                var productName = $("#editProductName").val();
                var categoryId = $("#editCategoryName").val();
                var quantityInStock = $("#editQuantityInStock").val();
                var purchasePrice = $("#editPurchasePrice").val();
                var salePrice = $("#editSalePrice").val();
                var warehouseId = $("#editWarehouseName").val();
                if (productName == "" || categoryId == "" || quantityInStock == "" || purchasePrice == "" || salePrice == "" || warehouseId == "") {
                    Swal.showValidationMessage(`Please fill all the fields`);
                }
                else {
                    var data = {
                        productId: productId,
                        productName: productName,
                        categoryId: categoryId,
                        quantityInStock: quantityInStock,
                        purchasePrice: purchasePrice,
                        salePrice: salePrice,
                        warehouseId: warehouseId
                    };
                    return $.ajax({
                        url: `${userInfo.apiUrl}products/${productId}`,
                        headers: { 'Authorization': `Bearer ${userInfo.token}` },
                        type: "PUT",
                        dataType: "json",
                        contentType: "application/json",
                        data: JSON.stringify(data),
                        success: function (response) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Edit Product Successfully',
                                showConfirmButton: false,
                                timer: 1500
                            })
                            dataTable.table.ajax.reload();
                        },
                        error: function (xhr) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Edit Product Failed',
                                showConfirmButton: false,
                                timer: 1500
                            })
                        }
                    });
                }
            }
        });
    }
</script>
}