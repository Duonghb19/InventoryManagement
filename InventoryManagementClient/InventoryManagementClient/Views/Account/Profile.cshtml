@model UserInfo
@{
    ViewData["Title"] = "Profile";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var userInfo = Context.Items["UserInfo"] as UserInfo;
}

@section Styles{
    <style>
        .file-field input.file-path {
            font-size: .87rem;
            font-weight: 300;
        }
    </style>
 }

<section class="section team-section p-4 d-flex justify-content-center">
    @if (!string.IsNullOrEmpty(Context.Request.Query["Message"]))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @Context.Request.Query["Message"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <div class="col-md-4 mb-4">
        <div class="card profile-card">
            <div class="avatar z-depth-1-half mb-4">
                @{
                    var imgSrc = "";
                    imgSrc = "/images/defaultImage.jpg";
                }
                <img src="@imgSrc" class="rounded-circle" style="height: 150px; width: 150px" alt="" />
            </div>
            <div class="card-body pt-0 mt-0">
                <div class="text-center">
                    <h4 class="mb-1 font-weight-bold"><strong>@userInfo.Username</strong></h4>
                </div>
                <ul class="striped list-unstyled">
                    <li><strong>Username:</strong> @userInfo.Username</li>
                </ul>
            </div>
        </div>
    </div>

</section>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        let opt = {
            viewport: { width: 150, height: 150 },
            boundary: { width: 180, height: 180 },
            showZoomer: false,
            enableResize: true,
            enableOrientation: true
        };

        let $cropContainer = $('#upload-demo');
        let $uploadCrop = $cropContainer.croppie(opt);
        const $photo = $('#Image');
        const $preview = $('#prevImage');
        const $btnDone = $('#doneButton');

        $('input[type="file"]').change(function (e) {
            const $this = $(e.target);
            const $fileField = $this.closest('.file-field');
            const $pathInput = $fileField.find('input.file-path');
            const fileNames = [];

            fileNames.push(e.target.files[0].name);

            $pathInput.val(fileNames.join(', '));
            $pathInput.trigger('change');
        });

        $('#upload').on('change', function () {
            readFile(this);
        });

        $btnDone.on('click', function () {
            $uploadCrop.croppie('result', { type: 'base64' }).then(function (res) {
                $photo.val(res.split(',')[1]);
                $cropContainer.hide();
                $btnDone.hide();
                $preview.attr('src', res).addClass('img-thumbnail rounded-circle');;
            });
        });

        function readFile(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    $uploadCrop.croppie('bind', { url: e.target.result });

                    $photo.val('');
                    $cropContainer.show();
                    $btnDone.show();
                    $preview.attr('src', '').removeClass('img-thumbnail rounded-circle');
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        function clearImage(ctrl) {
            if ($(ctrl).val() === "") {
                $cropContainer.croppie('destroy');
                $uploadCrop = $cropContainer.croppie(opt);
            }
        }
    </script>
}